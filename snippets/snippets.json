{
  "styles": {
    "prefix": "styled-react",
    "body": [
      "import styled from 'styled-components';",
      "",
      "export const ${1:Container} = styled.${2:div}`",
      "  ${3}",
      "`;",
      ""
    ],
    "description": "Create ReactJS Styled Components file"
  },

  "reactNativeStyles": {
    "prefix": "styled-react-native",
    "body": [
      "import styled from 'styled-components/native';",
      "",
      "export const ${1:Container} = styled.${2:View}`",
      "  ${3}",
      "`;",
      ""
    ],
    "description": "Create React Native Styled Component file"
  },

  "componentFunctionalJavascript": {
    "prefix": "rfc",
    "body": [
      "import { Container } from './styles';",
      "",
      "function ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}() {",
      "  return <Container />;",
      "}",
      "",
      "export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}};"
    ],
    "description": "Create React Functional Component"
  },

  "useState": {
    "prefix": "us",
    "body": ["const [$1, set$2] = useState($3)"],
    "description": "Create useState call"
  },

  "useEffect": {
    "prefix": "ue",
    "body": ["useEffect(() => {", "  $1", "}, []);"],
    "description": "Create useEffect call"
  },

  "useCallback": {
    "prefix": "uc",
    "body": ["const $1 = useCallback(() => {", "  $2", "}, []);"],
    "description": "Create useCallback call"
  },

  "useMemo": {
    "prefix": "um",
    "body": ["const $1 = useMemo(() => {", "  $2", "  return null;", "},[]);"],
    "description": "Create useMemo call"
  },

  "test": {
    "prefix": "tt",
    "body": ["test('it should $1', () => {", "\t$2", "});"],
    "description": "Create test call"
  },

  "api": {
    "prefix": "api",
    "body": [
      "import axios from 'axios';",
      "",
      "const api = axios.create({",
      " baseURL: '$1'",
      "});",
      "",
      "export default api;"
    ],
    "description": "Create API instance"
  },

  "store-react": {
    "prefix": "store-react",
    "body": [
      "import { compose, applyMiddleware } from 'redux';",
      "import createSagaMiddleware from 'redux-saga';",
      "import { configureStore } from '@reduxjs/toolkit';",
      "",
      "import slices from './slices';",
      "import sagas from './sagas';",
      "",
      "const middlewares = [];",
      "",
      "const sagaMiddleware = createSagaMiddleware();",
      "",
      "const composer =",
      "  process.env.NODE_ENV === 'development'",
      "    ? // eslint-disable-next-line no-console",
      "      compose(applyMiddleware(...middlewares), console.tron.createEnhancer())",
      "    : compose(applyMiddleware(...middlewares));",
      "",
      "const store = configureStore({",
      "  reducer: slices,",
      "  middleware: (getDefaultMiddleware) =>",
      "    getDefaultMiddleware().prepend(sagaMiddleware).prepend(middlewares),",
      "  enhancers: [composer],",
      "});",
      "",
      "sagaMiddleware.run(sagas);",
      "",
      "export default store;"
    ],
    "description": "Create Redux Store file"
  },

  "store-react-native": {
    "prefix": "store-react-native",
    "body": [
      "import { compose, applyMiddleware } from 'redux';",
      "import createSagaMiddleware from 'redux-saga';",
      "import { configureStore } from '@reduxjs/toolkit';",
      "",
      "import slices from './slices';",
      "import sagas from './sagas';",
      "",
      "const middlewares = [];",
      "",
      "const sagaMiddleware = createSagaMiddleware();",
      "",
      "const composer = __DEV__",
      "  ? // eslint-disable-next-line no-console",
      "    compose(applyMiddleware(...middlewares), console.tron.createEnhancer())",
      "  : compose(applyMiddleware(...middlewares));",
      "",
      "const store = configureStore({",
      "  reducer: slices,",
      "  middleware: (getDefaultMiddleware) =>",
      "    getDefaultMiddleware().prepend(sagaMiddleware).prepend(middlewares),",
      "  enhancers: [composer],",
      "});",
      "",
      "sagaMiddleware.run(sagas);",
      "",
      "export default store;"
    ],
    "description": "Create Redux Store file"
  },

  "slice": {
    "prefix": "slice",
    "body": [
      "import { createSlice } from '@reduxjs/toolkit';",
      "",
      "const initialState = {",
      " loading: false",
      "}",
      "",
      "export const slice = createSlice({",
      "name: '$1',",
      "initialState,",
      "reducers: {",
      " foo: (state) => {",
      "  state.loading = true",
      " }",
      "}",
      "})",
      "",
      "export const ${2:Any}Actions = slice.actions;",
      "",
      "export default slice.reducer;"
    ],
    "description": "Create Redux Toolkit Slice file"
  },

  "rootReducer": {
    "prefix": "root-reducer",
    "body": [
      "import { combineReducers } from 'redux';",
      "",
      "const rootReducer = combineReducers({",
      " $1",
      "});",
      "",
      "export default rootReducer;"
    ],
    "description": "Create Root Reducer file"
  },

  "rootSaga": {
    "prefix": "root-saga",
    "body": [
      "import { all } from 'redux-saga/effects';",
      "",
      "export default function* rootSaga() {",
      "  yield all([$1].flat());",
      "}"
    ],
    "description": "Create Root Saga file"
  },

  "useSelector": {
    "prefix": "usl",
    "body": ["const { $2 } = useSelector((state) => state.$1);"],
    "description": "Create useSelector call"
  },

  "useDispatch": {
    "prefix": "ud",
    "body": ["const dispatch = useDispatch();"],
    "description": "Create useDispatch call"
  },

  "reactotronReactJS": {
    "prefix": "reactotron-react",
    "body": [
      "import Reactotron from 'reactotron-react-js';",
      "import { reactotronRedux } from 'reactotron-redux';",
      "",
      "if (process.env.NODE_ENV === 'development') {",
      "  const tron = Reactotron.configure({",
      "   name: '$1',",
      "   host: '127.0.0.1',",
      "   port: 10000,",
      "  })",
      "  .use(reactotronRedux())",
      "  .connect();",
      "  ",
      "  tron.clear();",
      "  ",
      "  // eslint-disable-next-line no-console",
      "   console.tron = tron;",
      "}"
    ],
    "description": "Create Reactotron config for ReactJS"
  },

  "reactotronReactNative": {
    "prefix": "reactotron-react-native",
    "body": [
      "import Reactotron, { asyncStorage } from 'reactotron-react-native';",
      "import { reactotronRedux } from 'reactotron-redux';",
      "",
      "if (__DEV__) {",
      "  const tron = Reactotron.configure({",
      "    name: '$1',",
      "    port: 10000,",
      "  })",
      "    .use(reactotronRedux())",
      "    .use(asyncStorage())",
      "    .connect();",
      "",
      "  tron.clear();",
      "",
      "  console.tron = tron;",
      "}"
    ],
    "description": "Create Reactotron config for React Native"
  }
}
