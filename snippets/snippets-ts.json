{
  "styles": {
    "prefix": "styled-react",
    "body": [
      "import styled from 'styled-components';",
      "",
      "export interface ContainerProps{}",
      "",
      "export const ${1:Container} = styled.${2:div}<ContainerProps>`",
      "  ${3}",
      "`;",
      ""
    ],
    "description": "Create ReactJS Styled Components file"
  },

  "reactNativeStyles": {
    "prefix": "styled-react-native",
    "body": [
      "import styled from 'styled-components/native';",
      "",
      "export interface ContainerProps{}",
      "",
      "export const ${1:Container} = styled.${2:View}<ContainerProps>`",
      "  ${3}",
      "`;",
      ""
    ],
    "description": "Create ReactJS Styled Component Typescript file"
  },

  "componentFunctionalTypescript": {
    "prefix": "rfc",
    "body": [
      "import { Container } from './styles';",
      "",
      "export interface ${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}Props{$1}",
      "",
      "function ${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}({$2}:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}Props){",
      "  return <Container />;",
      "}",
      "",
      "export default ${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/};"
    ],
    "description": "Create React Functional Component Typescript"
  },

  "useState": {
    "prefix": "us",
    "body": ["const [$1, set$2] = useState($3)"],
    "description": "Create useState call"
  },

  "useEffect": {
    "prefix": "ue",
    "body": ["useEffect(() => {", "  $1", "}, []);"],
    "description": "Create useEffect call"
  },

  "useCallback": {
    "prefix": "uc",
    "body": ["const $1 = useCallback(() => {", "  $2", "}, []);"],
    "description": "Create useCallback call"
  },

  "useMemo": {
    "prefix": "um",
    "body": ["const $1 = useMemo(() => {", "  $2", "  return null;", "},[]);"],
    "description": "Create useMemo call"
  },

  "useNavigation": {
    "prefix": "un",
    "body": ["const navigation = useNavigation()"],
    "description": "Create useNavigation call"
  },

  "api": {
    "prefix": "api",
    "body": [
      "import axios from 'axios';",
      "",
      "const api = axios.create({",
      " baseURL: '$1'",
      "});",
      "",
      "export default api;"
    ],
    "description": "Create API instance"
  },

  "store-react": {
    "prefix": "store-react",
    "body": [
      "import { compose, applyMiddleware, Store } from 'redux';",
      "import createSagaMiddleware from 'redux-saga';",
      "import { createStore } from '@reduxjs/toolkit';",
      "",
      "import slices from './slices';",
      "import sagas from './sagas';",
      "",
      "const middlewares = [];",
      "",
      "const sagaMiddleware = createSagaMiddleware();",
      "",
      "middlewares.push(sagaMiddleware);",
      "",
      "const composer =",
      "  process.env.NODE_ENV === 'development'",
      "    ? // eslint-disable-next-line no-console",
      "      compose(applyMiddleware(...middlewares), console.tron.createEnhancer())",
      "    : compose(applyMiddleware(...middlewares));",
      "",
      "export type StoreState = ReturnType<typeof slices>;",
      "",
      "const store: Store<StoreState> = createStore(slices, undefined, composer);",
      "",
      "sagaMiddleware.run(sagas);",
      "",
      "export default store;"
    ],
    "description": "Create Redux Store file"
  },

  "store-react-native": {
    "prefix": "store-react-native",
    "body": [
      "import { compose, applyMiddleware, Store } from 'redux';",
      "import createSagaMiddleware from 'redux-saga';",
      "import { createStore } from '@reduxjs/toolkit';",
      "",
      "import slices from './slices';",
      "import sagas from './sagas';",
      "",
      "const middlewares = [];",
      "",
      "const sagaMiddleware = createSagaMiddleware();",
      "",
      "middlewares.push(sagaMiddleware);",
      "",
      "const composer =",
      "  __DEV__",
      "    ? // eslint-disable-next-line no-console",
      "      compose(applyMiddleware(...middlewares), console.tron.createEnhancer())",
      "    : compose(applyMiddleware(...middlewares));",
      "",
      "export type StoreState = ReturnType<typeof slices>;",
      "",
      "const store: Store<StoreState> = createStore(slices, undefined, composer);",
      "",
      "sagaMiddleware.run(sagas);",
      "",
      "export default store;"
    ],
    "description": "Create Redux Store file"
  },

  "slice": {
    "prefix": "slice",
    "body": [
      "import { createSlice, PayloadAction } from '@reduxjs/toolkit';",
      "",
      "const initialState = {",
      " loading: false",
      "}",
      "",
      "export const slice = createSlice({",
      "name: '$1',",
      "initialState,",
      "reducers: {",
      " foo: (state, {}: PayloadAction<unknown>) => {",
      "  state.loading = true",
      " }",
      "}",
      "})",
      "",
      "export const ${2:Foo}Actions = slice.actions;",
      "",
      "export default slice.reducer;"
    ],
    "description": "Create Redux Toolkit Slice file"
  },

  "rootReducer": {
    "prefix": "root-reducer",
    "body": [
      "import { combineReducers } from 'redux';",
      "",
      "const rootReducer = combineReducers({",
      " $1",
      "});",
      "",
      "export default rootReducer;"
    ],
    "description": "Create Root Reducer file"
  },

  "rootSaga": {
    "prefix": "root-saga",
    "body": [
      "import { all } from 'redux-saga/effects';",
      "",
      "export default function* rootSaga() {",
      "  yield all([].flat());",
      "}"
    ],
    "description": "Create Root Saga file"
  },

  "useSelector": {
    "prefix": "usl",
    "body": ["const { $2 } = useSelector((state) => state.$1);"],
    "description": "Create useSelector call"
  },

  "useDispatch": {
    "prefix": "ud",
    "body": ["const dispatch = useDispatch();"],
    "description": "Create useSelector call"
  },

  "reactotronReactJS": {
    "prefix": "reactotron-react",
    "body": [
      "import Reactotron from 'reactotron-react-js';",
      "import { reactotronRedux } from 'reactotron-redux';",
      "",
      "declare global {",
      "  interface Console {",
      "    tron: any;",
      "  }",
      "}",
      "",
      "if (process.env.NODE_ENV === 'development') {",
      "  const tron = Reactotron.configure({",
      "   name: '$1',",
      "   host: '127.0.0.1',",
      "   port: 10000,",
      "  })",
      "  .use(reactotronRedux())",
      "  .connect();",
      "  ",
      "  tron.clear!();",
      "  ",
      "  // eslint-disable-next-line no-console",
      "   console.tron = tron;",
      "}"
    ],
    "description": "Create Reactotron config for ReactJS"
  },

  "reactotronReactNative": {
    "prefix": "reactotron-react-native",
    "body": [
      "import Reactotron, { asyncStorage } from 'reactotron-react-native';",
      "import { reactotronRedux } from 'reactotron-redux';",
      "",
      "declare global {",
      "  interface Console {",
      "    tron: any;",
      "  }",
      "}",
      "",
      "if (__DEV__) {",
      "  const tron = Reactotron.configure({",
      "    name: '$1',",
      "    port: 10000,",
      "  })",
      "    .use(reactotronRedux())",
      "    .use(asyncStorage())",
      "    .connect();",
      "",
      "  tron.clear!();",
      "  ",
      "  // eslint-disable-next-line no-console",
      "   console.tron = tron;",
      "}"
    ],
    "description": "Create Reactotron config for React Native"
  }
}
